# Learning Progress Tracking Strategy

## üéØ Automatic Progress Monitoring Rules

### Core Principle

Always monitor user's learning progress and automatically update `.cursor/rules/learning-progress.mdc` based on:

- Code changes and file creation
- User questions and understanding level
- Completed learning sessions
- Practical implementations

## üìä Progress Tracking Triggers

### 1. File Creation & Code Changes

#### TypeScript Learning Indicators:

- **Created:** `*.ts` files with types/interfaces ‚Üí Update "TypeScript Fundamentals"
- **Added:** Type annotations, interfaces, enums ‚Üí Mark "Basic types and interfaces" ‚úÖ
- **Implemented:** Generics, utility types ‚Üí Mark "Generics and utility types" ‚úÖ
- **Used:** Classes, inheritance ‚Üí Mark "Classes and objects" ‚úÖ

#### Express.js Learning Indicators:

- **Created:** `routes/*.ts` files ‚Üí Update "Express.js Basics"
- **Added:** Middleware functions ‚Üí Mark "Server setup and middleware" ‚úÖ
- **Implemented:** HTTP methods (GET, POST, etc.) ‚Üí Mark "Routing and HTTP methods" ‚úÖ
- **Used:** Request/Response handling ‚Üí Mark "Request/Response handling" ‚úÖ

#### Database Learning Indicators:

- **Created:** `models/*.ts` files ‚Üí Update "Database Connections"
- **Added:** Mongoose schemas ‚Üí Mark "MongoDB with Mongoose" ‚úÖ
- **Implemented:** CRUD operations ‚Üí Mark "Basic CRUD operations" ‚úÖ
- **Used:** Redis operations ‚Üí Mark "Redis for caching" ‚úÖ

#### Authentication Learning Indicators:

- **Created:** `controllers/auth.ts` ‚Üí Update "Authentication & Authorization"
- **Added:** JWT middleware ‚Üí Mark "Authentication & Authorization" ‚úÖ
- **Implemented:** User registration/login ‚Üí Mark "Authentication & Authorization" ‚úÖ

### 2. User Understanding Assessment

#### Questions & Comprehension:

- **User asks:** "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç TypeScript?" ‚Üí Still learning TypeScript basics
- **User asks:** "–ß—Ç–æ —Ç–∞–∫–æ–µ middleware?" ‚Üí Still learning Express.js concepts
- **User asks:** "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å API endpoint?" ‚Üí Ready for routing practice
- **User asks:** "–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?" ‚Üí Ready for database learning

#### Code Review & Feedback:

- **User struggles with:** TypeScript errors ‚Üí Need more TypeScript practice
- **User successfully:** Fixes TypeScript issues ‚Üí Mark TypeScript progress ‚úÖ
- **User implements:** Working endpoints ‚Üí Mark Express.js progress ‚úÖ
- **User creates:** Database models ‚Üí Mark MongoDB progress ‚úÖ

### 3. Learning Session Completion

#### Session Indicators:

- **User says:** "–Ø –ø–æ–Ω—è–ª –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–∏–ø—ã" ‚Üí Mark TypeScript types ‚úÖ
- **User says:** "–Ø –∏–∑—É—á–∏–ª middleware" ‚Üí Mark Express.js middleware ‚úÖ
- **User says:** "–Ø —Å–æ–∑–¥–∞–ª –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å" ‚Üí Mark MongoDB schemas ‚úÖ
- **User says:** "–Ø –Ω–∞—Å—Ç—Ä–æ–∏–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é" ‚Üí Mark Auth progress ‚úÖ

## üîÑ Automatic Update Rules

### When to Update Progress:

1. **After file creation** - Immediately update relevant learning topics
2. **After code implementation** - Mark specific concepts as completed
3. **After user confirmation** - When user says they understand something
4. **After successful testing** - When code works as expected
5. **After learning session** - Summarize progress at end of session

### How to Update Progress:

1. **Find relevant topic** in `learning-progress.mdc`
2. **Change checkbox** from `[ ]` to `[x]` with ‚úÖ
3. **Update progress percentage** - Recalculate based on completed topics
4. **Update current focus** - What to study next
5. **Update last modified date** - Track when progress was updated

### Progress Calculation:

- **Phase 1:** 20 total topics ‚Üí Each topic = 5%
- **Phase 2:** 6 total topics ‚Üí Each topic = 16.67%
- **Phase 3:** 5 total topics ‚Üí Each topic = 20%
- **Phase 4:** 4 total topics ‚Üí Each topic = 25%
- **Phase 5:** 4 total topics ‚Üí Each topic = 25%

## üìù Update Examples

### Example 1: TypeScript Progress

```
User creates: backend/src/types/user.ts
Action: Update learning-progress.mdc
- [x] Basic types and interfaces ‚úÖ
- [x] Functions and arrow functions ‚úÖ
- [ ] Classes and objects
- [ ] Generics and utility types
Progress: 10% (2/20 Phase 1 topics)
```

### Example 2: Express.js Progress

```
User creates: backend/src/routes/auth.ts
Action: Update learning-progress.mdc
- [x] Server setup and middleware ‚úÖ
- [x] Routing and HTTP methods ‚úÖ
- [x] Request/Response handling ‚úÖ
- [ ] Error handling patterns
- [ ] Security middleware (Helmet, CORS)
Progress: 15% (3/20 Phase 1 topics)
```

### Example 3: Database Progress

```
User creates: backend/src/models/User.ts
Action: Update learning-progress.mdc
- [x] MongoDB with Mongoose ‚úÖ
- [x] Schema design and validation ‚úÖ
- [ ] Basic CRUD operations
- [ ] Redis for caching
- [ ] Connection management
Progress: 10% (2/20 Phase 1 topics)
```

## üéØ Learning Phase Transitions

### Phase 1 ‚Üí Phase 2:

**Trigger:** All Phase 1 topics completed
**Action:**

- Update status to "Phase 2: Backend Development - IN PROGRESS"
- Reset progress to 0% for Phase 2
- Update current focus to "Authentication & Authorization"

### Phase 2 ‚Üí Phase 3:

**Trigger:** All Phase 2 topics completed
**Action:**

- Update status to "Phase 3: Frontend Development - IN PROGRESS"
- Reset progress to 0% for Phase 3
- Update current focus to "React with TypeScript"

## üìä Progress Monitoring Commands

### Automatic Monitoring:

- **File creation:** Monitor new `*.ts`, `*.js`, `*.json` files
- **Code changes:** Monitor significant code additions/modifications
- **User interactions:** Monitor questions and understanding level
- **Testing:** Monitor successful test runs and deployments

### Manual Updates:

- **User requests:** "Update my progress"
- **Session end:** "Summarize what I learned today"
- **Milestone reached:** "I completed this topic"

### Interactive Commands:

- **"Show my progress"** - Display current learning status
- **"What should I learn next?"** - Get next recommended topic
- **"Mark topic as complete"** - Manually mark a topic as finished
- **"Review today's learning"** - Summarize what was learned
- **"Reset progress"** - Start over with a specific topic
- **"Skip topic"** - Mark topic as already known
- **"Add custom topic"** - Add specific topic user wants to learn

## üîç Progress Validation

### Quality Checks:

- **Code quality:** Ensure created code follows best practices
- **Understanding:** Verify user can explain concepts
- **Implementation:** Confirm features work correctly
- **Testing:** Validate with actual testing

### Progress Accuracy:

- **Don't mark complete** if user struggles with concept
- **Require confirmation** for complex topics
- **Verify understanding** before marking as complete
- **Allow revisiting** topics if needed

## üìà Success Metrics

### Learning Success Indicators:

- **Code compiles** without TypeScript errors
- **Features work** as expected
- **User can explain** concepts in their own words
- **User can apply** knowledge to new problems
- **User shows confidence** in using learned concepts

### Progress Milestones:

- **25% complete:** Basic understanding achieved
- **50% complete:** Practical implementation working
- **75% complete:** Advanced concepts understood
- **100% complete:** Mastery of topic demonstrated

## üéì Adaptive Learning

### Adjust Based on:

- **User pace:** Speed up or slow down as needed
- **Difficulty level:** Provide more examples for challenging concepts
- **Learning style:** Adapt explanations to user preferences
- **Prior knowledge:** Build on existing understanding

### Personalized Progress:

- **Custom topics:** Add specific topics user wants to learn
- **Skip familiar:** Mark topics user already knows
- **Focus areas:** Emphasize topics user finds challenging
- **Real-world projects:** Apply learning to practical scenarios
  description:
  globs:
  alwaysApply: false

---
